<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd		
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- spring bean scanning setting -->
	<context:component-scan base-package="com.prj.api.*" />

	<!-- Enables the Spring MVC @Controller programming model -->
		<!-- 
			<mvc:annotation-driven />는 RequestMappingHandlerMapping, RequestMappingHandlerAdapter를 등록해준다.
			이 두 클래스는 @Controller 애노테이션이 적용된 클래스를 컨트롤러로 사용할 수 있도록 해준다. 이 두 객체 외에
			JSON이나 XML 등 요청/응답 처리를 위해 필요한 변환 모듈이나 데이터 바인딩 처리를 위한 ConversionService 등을 빈으로 등록해준다.  
	 	-->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
		<!-- 
			CSS, JS, 이미지 등의 자원은 거의 변하지 않기 때문에, 웹 브라우저에 캐시를 하면 네트워크 사용량, 서버 사용량, 웹 브라우저의 반응 속도 등을 개선할 수 있다. 이런 정적 자원은 보통 별도
			웹 서버에서 제공하기 때문에 웹 서버의 캐시 옵션 설정을 통해 웹 브라우저 캐시를 활성화시킬 수 있다. 하지만, 스프링 MVC를 이용하는 웹 어플리케이션에 정적 자원 파일이 함께 포함되어 있다면 
			웹 서버 설정을 사용하지 않고 <mvc:resources> 설정을 이용해서 웹 브라우저 캐시를 사용하도록 지정할 수 있다.
		 -->
		<!-- 
			ex.) <img src="/resources/images/One Planet Black.jpg"/> 와 같이 요청 경로가 /resources/로 시작하면, 그에 해당하는 자원을 /WEB-INF/resource/
			디렉토리에서 검색을 한다. 
		-->

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**/*" />
			<!-- 
				아래에 정의한 빈 객체를 핸들러 인터셉터로 사용하고, DispatcherServlet이 처리하는 요청에 대해 핸들러
				인터셉터를 적용하게 된다.
			 -->
			<beans:bean class="com.prj.api.common.etc.CommonModelInterceptor" />
		</mvc:interceptor>
		<!-- <beans:bean class="net.madvirus.spring4.chap07.common.MeasuringInterceptor" />
		<mvc:interceptor>
			특정 요청 경로에 대해서만 핸들러 인터셉터를 적용하고 싶다면 아래와 같이 설정한다.
			<mvc:mapping path="/acl/**" />
			<mvc:mapping path="/header/**" />
			<mvc:mapping path="/newevent/**" />
			특정 경로 패턴에 대한 핸들러 인터셉터를 적용하고 싶지 않은 경우
			<mvc:exclude-mapping path="/acl/modify" />
			<beans:ref bean="commonModelInterceptor" />
		</mvc:interceptor> -->
	</mvc:interceptors>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
		<!-- 
			InternalResourceViewResolver는 JSP를 이용해서 뷰를 생성할 때 사용되는 ViewResolver의 구현체이다.
		 -->
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
</beans:beans>
